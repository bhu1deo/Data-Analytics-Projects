
-- Mid Course Project : 
-- Sessions and Orders Monthly Trends : gsearch : Till 27 November 

SELECT * FROM website_sessions;
SELECT * FROM orders;

-- Monthly trends : 

SELECT 
MONTH(DATE(website_sessions.created_at)) as month,
YEAR(DATE(website_sessions.created_at)) as year,
COUNT(DISTINCT website_sessions.website_session_id) as sessions, 
COUNT(DISTINCT order_id) as orders
FROM website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-11-27' AND website_sessions.utm_source = 'gsearch'
GROUP BY 1,2;



-- Now splitting nonbrand and brand campaigns separately 

SELECT 
MONTH(DATE(website_sessions.created_at)) as month,
YEAR(DATE(website_sessions.created_at)) as year,
COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) as non_brand_sessions, 
COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) as non_brand_orders,
COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN website_sessions.website_session_id ELSE NULL END) as brand_sessions, 
COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN orders.order_id ELSE NULL END) as brand_orders
FROM website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-11-27' AND website_sessions.utm_source = 'gsearch'
GROUP BY 1,2;

-- Splitting on the basis of device type : 
SELECT 
MONTH(DATE(website_sessions.created_at)) as month,
YEAR(DATE(website_sessions.created_at)) as year,
COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) as desktop_sessions, 
COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN orders.order_id ELSE NULL END) as desktop_orders,
COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN website_sessions.website_session_id ELSE NULL END) as mobile_sessions, 
COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN orders.order_id ELSE NULL END) as mobile_orders
FROM website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-11-27' AND website_sessions.utm_source = 'gsearch' AND utm_campaign = 'nonbrand'
GROUP BY 1,2;

-- Now for all of our channels : 

SELECT 
MONTH(DATE(website_sessions.created_at)) as month,
YEAR(DATE(website_sessions.created_at)) as year,
COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' THEN website_sessions.website_session_id ELSE NULL END) as gsearch_sessions, 
COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' THEN orders.order_id ELSE NULL END) as gsearch_orders,
COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' THEN website_sessions.website_session_id ELSE NULL END) as bsearch_sessions, 
COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' THEN orders.order_id ELSE NULL END) as bsearch_orders,
COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) as organic_sessions,
COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN orders.order_id ELSE NULL END) as organic_orders,
COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) as direct_sessions,
COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN orders.order_id ELSE NULL END) as direct_orders
FROM website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
GROUP BY 1,2;

-- session to order conversion rate : Overall 

SELECT 
MONTH(DATE(website_sessions.created_at)) as month,
YEAR(DATE(website_sessions.created_at)) as year,
COUNT(DISTINCT website_sessions.website_session_id) as sessions, 
COUNT(DISTINCT order_id) as orders,
ROUND(100*COUNT(DISTINCT order_id)/COUNT(DISTINCT website_sessions.website_session_id),2) as conv_rate
FROM website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
GROUP BY 1,2;


-- Estimation of Increase in Revenue which the lander-1 Test earned us : 19 June to 28 July 
-- First find the conversion rates for the home and lander-1 pages during that time period : 
-- Then see the increase in conversion rate for the lander-1 page
-- Then count the total sessions associated with the nonbrand campaign 28 July till 27 November 
--  Using the incremental conversion rate find extra orders which were generated by the lander-1 page which was the landing page after July 28

-- lander-1 first date of creation : 


USE mavenfuzzyfactory; 

SELECT * FROM website_pageviews;


DROP TABLE session_pageview;
-- In order to JOIN : we make a temporary table!!! Used a lot 
CREATE TEMPORARY TABLE session_pageview 
SELECT website_pageviews.website_session_id,MIN(website_pageview_id) as page_id FROM website_pageviews LEFT JOIN website_sessions 
ON website_pageviews.website_session_id = website_sessions.website_session_id
WHERE website_pageviews.created_at < '2012-07-28' AND website_pageviews.created_at > '2012-06-19' 
AND utm_source = 'gsearch' AND utm_campaign = 'nonbrand'
GROUP BY website_session_id; 

-- Now find the landing pages and their corresponding number of sessions : 

SELECT * FROM session_pageview;

DROP TABLE landing_page;


CREATE TEMPORARY TABLE landing_page 
SELECT session_pageview.website_session_id,pageview_url
FROM session_pageview LEFT JOIN website_pageviews ON session_pageview.page_id = website_pageviews.website_pageview_id
WHERE pageview_url IN ('/home','/lander-1');

SELECT * FROM landing_page;

-- Now get the sessions and Orders Data 

SELECT pageview_url,COUNT(DISTINCT landing_page.website_session_id) as sessions,COUNT(DISTINCT order_id) as orders,
ROUND(100*COUNT(DISTINCT order_id)/COUNT(DISTINCT landing_page.website_session_id),2) as conversion_rate
FROM landing_page LEFT JOIN orders ON landing_page.website_session_id=orders.website_session_id 
GROUP BY pageview_url;

-- 0.83% improvement on an average in the % conversion rate 

-- Now : nonbrand sessions : since 28 July : 

-- first find the last date when the traffic was sent to home : 
SELECT pageview_url, MAX(DATE(website_pageviews.created_at)) as recent_date
FROM website_pageviews LEFT JOIN website_sessions ON 
website_pageviews.website_session_id = website_sessions.website_session_id
WHERE pageview_url = '/home' AND website_pageviews.created_at < '2012-11-27' AND utm_campaign = 'nonbrand' 
AND utm_source = 'gsearch'
GROUP BY pageview_url; 

-- 30th July was the last date for /home lander page 
-- Now count the total sessions from that point onwards : 

SELECT COUNT(DISTINCT website_session_id) as sessions 
FROM website_sessions 
WHERE created_at < '2012-11-27' AND created_at > '2012-07-30'
AND utm_campaign = 'nonbrand';
-- We have not put gsearch filter here as all nonbrand sessions was asked 

-- --> 28K sessions : 0.0083*28000 = 232.4 : 4 months : 50+ Order Increase Per Month on an average 

-- 19th June to 28 July : Website Pageviews gsearch nonbrand traffic 
-- complete (full) conversion funnel for the 2 landing pages 
-- For each website_session we have the pages we visit and thus we just have to link the landing page
-- to each website_session

-- landing page : find min website_pageview_id as we want the first page for every session
-- then join on website_sessions table so as to limit urself to gsearch and nonbrand 
-- then join the original website_pageviews table to link to the first pageview_url : landing page 
DROP TABLE website_session_landing_page;

CREATE TABLE website_session_landing_page
SELECT website_pageviews.website_session_id,pageview_url as lander_page
FROM website_pageviews RIGHT JOIN
(
SELECT website_pageviews.website_session_id,MIN(website_pageview_id) as page_id
FROM website_pageviews INNER JOIN 
website_sessions ON website_pageviews.website_session_id = website_sessions.website_session_id
WHERE website_pageviews.created_at < '2012-07-28' AND website_pageviews.created_at > '2012-06-19'
AND utm_source = 'gsearch' AND utm_campaign = 'nonbrand'
GROUP BY website_session_id
) as session_page ON website_pageviews.website_pageview_id = session_page.page_id 
WHERE pageview_url IN ('/home','/lander-1'); 

SELECT * FROM website_session_landing_page;

-- Now for every gsearch nonbrand website_session between 19 June and 28 July : construct a Boolean Table 
-- do with above filtered website_sessions : 

SELECT lander_page,
COUNT(DISTINCT website_session_landing_page.website_session_id) as total_sessions,
ROUND(100*COUNT(products_bool)/COUNT(DISTINCT website_session_landing_page.website_session_id),2) as lander_rt,
ROUND(100*COUNT(fuzzy_bool)/COUNT(products_bool),2) as product_rt,
ROUND(100*COUNT(cart_bool)/COUNT(fuzzy_bool),2) as mrfuzzy_rt,
ROUND(100*COUNT(shipping_bool)/COUNT(cart_bool),2) as cart_rt,
ROUND(100*COUNT(billing_bool)/COUNT(shipping_bool),2) as shipping_rt,
ROUND(100*COUNT(order_complete_bool)/COUNT(billing_bool),2) as billing_rt,
ROUND(100*COUNT(order_complete_bool)/COUNT(DISTINCT website_session_landing_page.website_session_id),2) as overall_rt
FROM website_session_landing_page INNER JOIN  
(
SELECT website_session_landing_page.website_session_id,
pageview_url,
-- CASE WHEN pageview_url = '/home' THEN 1 ELSE 0 END as home_bool,
-- CASE WHEN pageview_url = '/lander-1' THEN 1 ELSE 0 END as lander_1_bool,
CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE NULL END as fuzzy_bool,
CASE WHEN pageview_url = '/products' THEN 1 ELSE NULL END as products_bool,
CASE WHEN pageview_url = '/cart' THEN 1 ELSE NULL END as cart_bool,
CASE WHEN pageview_url = '/shipping' THEN 1 ELSE NULL END as shipping_bool,
CASE WHEN pageview_url = '/billing' THEN 1 ELSE NULL END as billing_bool,
CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE NULL END as order_complete_bool
FROM website_session_landing_page INNER JOIN website_pageviews 
ON website_session_landing_page.website_session_id = website_pageviews.website_session_id) as bool_info
ON website_session_landing_page.website_session_id = bool_info.website_session_id
GROUP BY lander_page;

-- Quantify the Impact of our New Billing Page : Revenue per Billing page session 
-- Number of Billing page sessions from the last month 
-- Sept 10 to Nov 10 all traffic 


SELECT 
website_pageviews.pageview_url,
SUM(orders.price_usd)/COUNT(DISTINCT website_pageviews.website_session_id) as revenue_per_session
FROM website_pageviews LEFT JOIN orders ON website_pageviews.website_session_id = orders.website_session_id
WHERE pageview_url IN ('/billing','/billing-2') AND website_pageviews.created_at > '2012-09-10' AND 
website_pageviews.created_at < '2012-11-10'
GROUP BY website_pageviews.pageview_url;

-- LEFT Join is important above : Inner JOIN will just give as the common rows between the two tables 

-- $ 8.34 average improvement per session 

-- Now find out the Billing page sessions for the last month : 

SELECT COUNT(DISTINCT website_pageviews.website_session_id) as billing_sessions_last_month
FROM website_pageviews
WHERE pageview_url IN ('/billing','/billing-2')
AND created_at < '2012-11-27' AND created_at > '2012-10-27';

-- 1091 billing sessions : 8.34*1091  = $10k approx lift in revenue 

