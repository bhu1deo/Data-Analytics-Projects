?Worksheets.Count

?Range("B2").Value

Selection.HorizontalAlignment = xlCenterAcrossSelection

Selection.HorizontalAlignment = xlLeft

Selection.HorizontalAlignment = xlRight



Change font to Times_New_Roman : 

Sub Change_Font_TNR()
'
' Change_Font_TNR Macro : Comment 
'

'
    Cells.Select
    With Selection.Font
        .Name = "Times New Roman"
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
End Sub

The same code as above with Extra unnneeded stuff trimmed out : 

Sub Change_Font_TNR()
'
' Change_Font_TNR Macro
'

'
    Cells.Select
    With Selection.Font
        .Name = "Times New Roman"
    End With
End Sub



VBA MACRO DEBUGGING CODE : 


Sub CreateReport()

'Call to the macro that inserts columns and rows.

InsertRowsCols

'Call to the macro that inserts report headers.

InsertTxt

'Call to the macro that formats the report text.

FmtTxt

End Sub

Sub InsertRowsCols()
'
' InsertRowsCols Macro
'
'
' Inserting one column and three rows
' from the upper left corner of the
' worksheet.

    Rows("1:4").Select
    Selection.Insert Shift:=xlDown
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight


End Sub


Sub InsertTxt()
'
'
'   Inserting report title and column header text.
'
    Range("A1").Select
    
    ActiveCell.FormulaR1C1 = "Our Global Company"
    
    Range("A2").Select
    
    ActiveCell.FormulaR1C1 = "Stock Prices"
    
    Range("B4").Select
    
    ActiveCell.FormulaR1C1 = "Symbol:"
    
    Range("C4").Select
    
    ActiveCell.FormulaR1C1 = "Open:"
    
    Range("D4").Select
    
    ActiveCell.FormulaR1C1 = "High:"
    
    Range("E4").Select

    ActiveCell.FormulaR1C1 = "Low:"
    
    Range("F4").Select

    ActiveCell.FormulaR1C1 = "Close:"
    
    Range("G4").Select

    ActiveCell.FormulaR1C1 = "Net Chg:"
    
    Range("H4").Select

    ActiveCell.FormulaR1C1 = "Pct Chg:"
    
    Range("I4").Select

    ActiveCell.FormulaR1C1 = "Prt Alloc:"
    
    Range("J4").Select

    ActiveCell.FormulaR1C1 = "Prt Pct Chg:"
    
End Sub
Sub FmtTxt()
'
'
' Formats inserted text and price and percent data
' in currency and percent format, then fits formatted
' data by auto-fitting columns.
'
'
    Columns("C:G").Select
    Selection.Style = "Currency"
    
    Columns("H:J").Select
    Selection.Style = "Percent"
    
    Range("A1").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 18
        .Bold = True
    End With

    Range("A2").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Bold = True
    End With
    
    Range("B4:J4").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 12
        .Bold = True
    End With
    
    Columns("B:J").EntireColumn.AutoFit
    
End Sub


Simple Macro : 


Sub FormatData()
'
' FormatData Macro
' Rows are a type of Object Functioname can be accessed by . operator

' Row Inerted then Some Edits made to corresponding cells
' Then The Entire Row is Bolded 
' Finally the Macro ends by selecting cell A1

    Rows("1:1").Insert
    Range("A1").Value = "Emp ID"
    Range("B1").Value = "Last Name"
    Range("C1").Value = "First Name"
    Rows("1:1").Font.Bold = True
    Range("A1").Select
    
End Sub


' A public subprocedure : 


Public Sub Format_Data_Test()


' Insert a Row
Rows("1:1").Insert

' Headers
Range("A1").Value = "Employee ID"
Range("B1").Value = "Last Name"
Range("C1").Value = "First Name"

' Turning the whole of the first row as bold
Rows("1:1").Font.Bold = True

' Select cell A1, as earlier the entire row would have been selected

Range("A1").Select

End Sub


' Select a particular cell : 
Range("C3").Select


' the code below means : first go to cell B4, then again travel 2 rows down and 2 columns to the right

Range("B4").Range("B2").Select


' Select cell E3
Cells(3,5).Select

' Give a color to the selection
Selection.Interior.Color = 65335 

' Assign red color to cell A1
Range("A1").Font.Color = vbred 


' Theme Color : 
Selection.Interior.ThemeColor = xlThemeColorDark1

' using rGB vlaues :

Selection.Interior.Color = RGB(12,34,123)
Selection.Font.Bold = True 
' Font in the selection would be bolded 


' Assign Value 
Range("A1").Value = "Hello Bhushan"
Range("A1").Clear 
' This will clear all of the contents inside cell A1

' Whenever we press the . then we see a list of methods/functions available for that object 
' Selection.Value and Selection.Clear also work 



'Rename active sheet : 
ActiveSheet.Name = "Sheet 4"


' Select first sheet
Sheets(1) 
Sheets(Sheet_Name in Quotes)


' Rename all the Sheets 
Public Sub Rename_Sheets()

Sheets(1).Select
ActiveSheet.Name = "Sheet 1"
Sheets(2).Select
ActiveSheet.Name = "Sheet 2"
Sheets(3).Select
ActiveSheet.Name = "Sheet 3"

End Sub



'Select the Current Region 
Selection.CurrentRegion.Select






Sub Insert_Details()
'
' Insert_Details Macro
'

'
    Range("A1").Value = "Our Global Company"
    Range("A2").Value = "Stock Prices"
    Range("B4").Value = ActiveSheet.Name & " Portfolio"
    Range("B6").Value = "Symbol"
    Range("C6").Value = "Open"
    Range("D6").Value = "Close"
    Range("E6").Value = "Net change"
End Sub
Sub Format_Sheet()
'
' Format_Sheet Macro
'

'
    Range("A1").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Bold = True
    End With

    Range("A2").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 12
        .Bold = True
    End With
    Range("B4").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 12
        .Italic = True
    End With
    Range("B6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("C6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("D6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("E6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
End Sub

Public Sub Complete_modification()
Insert_Details
Format_Table_Contents
Format_Sheet
AdjustColumnSize
End Sub
Sub AdjustColumnSize()
'
' AdjustColumnSize Macro
'

'
    Range("B6:E11").Select
    Columns("B:B").EntireColumn.AutoFit
    Columns("C:C").EntireColumn.AutoFit
    Columns("D:D").EntireColumn.AutoFit
    Columns("E:E").EntireColumn.AutoFit
End Sub


Public Sub Format_Table_Contents()

Range("B7").CurrentRegion.Select
Selection.Interior.ThemeColor = xlThemeColorDark2

End Sub


' Double for Next Loop :: 

Public Sub ForNextLoop()

Dim x As Integer

For x = 1 To 10
    Cells(x, 1) = 100
Next x

End Sub


Public Sub DoubleForNextLoop()

Dim x, y As Integer

For y = 1 To 3
    For x = 1 To 10
        Cells(x, y) = 100
    Next x
Next y

End Sub


Public Sub TripleForNextLoop()

Dim x, y, z As Integer

For z = 3 To 5
    Sheets(z).Select
    For y = 1 To 3
        For x = 1 To 10
            Cells(x, y) = 100
        Next x
    Next y
Next z

End Sub


' worksheet type variable : For all the sheets in the Workbook do something 
' do something for each element in the collection 
' For each loop syntax slightly different from For loop syntax

Public Sub ForEachLoop()

' A worksheet type variable
Dim x As Worksheet

For Each x In Worksheets
    MsgBox "Worksheet Name : " & x.Name
Next x

    
End Sub



' Break For Next Loop based upon a certain condition
' Exit For is used to break out of the immediate For loop  
' For Each Next

Public Sub ExitForLoop()

Dim x As Integer

For x = 1 To 50
    Range("B" & x).Select
    If Range("B" & x).Value = "Stop" Then
        Exit For
    ElseIf Range("B" & x).Value = "" Then
        Range("B" & x).Value = "Info"
    End If
 
Next x

End Sub



' Do While loop : Initialization, condition checking and then Increment 

Public Sub DoWhileLoopTest()

Dim x As Integer
x = 1
Do While x < 10
    Cells(x, 1).Value = 100
    x = x + 1
    
Loop

End Sub



' Do Until the condition becomes False : 
' Do until loop

Public Sub DoUntil()

' Keep replacing Data till we find an empty cell :
Dim row_num As Integer

row_num = 1

Do Until IsEmpty(Cells(row_num, 1))
    Cells(row_num, 1).Value = "New Data"
    row_num = row_num + 1
Loop


End Sub





Public Sub DoLoopUntil()

' instead of Do Until and then Loop : this is Do Loop until
' do until loop runs atleast once
' Do Loop Until

Dim x As Integer

x = 1

Do

    Cells(x, 1) = "New Value"
    x = x + 1

Loop Until IsEmpty(Cells(x, 1))


End Sub



' If we are querying the Immediate Window : then we should have ? before output based statements 
' No Display or Print option available

Selection.Offset(2,2).Select
' Offset and then select 

?Worksheets.Count
' Gives a Count of Worksheets present in the Workbook 


' Copy and Paste : 
Range("A1").Select
Selection.Copy
Selection.Offset(1,2).Select
ActiveSheet.Paste



' Selecting worksheets : 
Worksheets(Worksheets.Count).Select
?ActiveSheet.Name
P&L







Public Sub Pasting_Info()

' Pasting info into the P&L sheet

Dim x As Integer
Dim sheet_title As String

For x = 1 To Worksheets.Count - 1
    Worksheets(x).Select
    sheet_title = ActiveSheet.Name
    Worksheets(Worksheets.Count).Select    ' the last worksheet to be selected to dump the data 
    
    Range("A1").Select
    Selection.Offset(x * 5 + 2, 0).Select      ' we know how much space each table copied has : otherwise we would have to make this dynamic 
    Selection.Value = sheet_title
    Selection.Font.Bold = True
    
    Worksheets(x).Select
    Range("A1").Select                    ' We know that our data starts from A1, but that might not be the case always 
    Selection.CurrentRegion.Copy
    
    Worksheets(Worksheets.Count).Select
    
    ActiveCell.Offset(1, 0).Select
    ActiveSheet.Paste

Next x

Rows("3:6").Delete
Rows("2:3").Select
Selection.Clear





Selection.End(xlToLeft).Select
Selection.End(xlToRight).Select
Selection.End(xlUp).Select
Selection.End(xlDown).Select



' Absolute cell address 
?Selection.Address
















Option Explicit
Sub SortLastCol()
'
'
' A macro was recorded and this is it's equivalent VBA code here : 

    Range("A1").Select
    ActiveCell.CurrentRegion.Select
    
    Selection.Sort Key1:=Range("D1"), Order1:=xlDescending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
End Sub

Sub InsColRow()
'
'
'
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight
    Rows("1:6").Select
    Selection.Insert Shift:=xlDown
    
End Sub

Sub InsertTxt()
'
'
'
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Our Global Company"
    
    Range("A2").Select
    ActiveCell.FormulaR1C1 = "Stock Prices"
    
    Range("B4").Select
    Selection.Value = ActiveSheet.Name & " Portfolio"
    
    Range("B6").Select
    ActiveCell.FormulaR1C1 = "Symbol:"
    
    Range("C6").Select
    ActiveCell.FormulaR1C1 = "Open:"
        
    Range("D6").Select
    ActiveCell.FormulaR1C1 = "Close:"
    
    Range("E6").Select
    ActiveCell.FormulaR1C1 = "Net Chg:"
    
End Sub
Sub FmtTxt()
'
'
'
    Range("A1").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 18
        .Bold = True
    End With

    Range("A2").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Bold = True
    End With
    
    Range("B4").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Bold = True
    End With
    
    Range("B6:E6").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 12
        .Bold = True
    End With
    
    Columns("B:E").Select
    Selection.Style = "Currency"
    
    Columns("B:J").Select
    Selection.Columns.AutoFit

End Sub


Sub GenRep()

Dim x As Integer

For x = 1 To Worksheets.Count - 1
    Worksheets(x).Select
    Call SortLastCol
    Call InsColRow
    Call InsertTxt
    Call FmtTxt
    
    Range("B6").Select
    Selection.CurrentRegion.Select
    Selection.Copy
    
    
    Worksheets("All Portfolios").Select
    
    Range("B20000").Select
    Selection.End(xlUp).Select
    ActiveCell.Offset(2, 0).Select
    ActiveCell.Value = Worksheets(x).Name & " Portfolio:"
    ActiveCell.Offset(2, 0).Select
    ActiveSheet.Paste
    
    
Next x

Columns("B:E").Select
' autofit the selected columns 
Selection.Columns.AutoFit
    
End Sub

' VBA code generated by the Macro which recorded Find 

Sub findTest()
'
' findTest Macro
'

'
    Cells.Find(What:="portfolio", After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Activate
        
    Cells.FindNext(After:=ActiveCell).Activate
End Sub






' Finding a particular word (partially) and Formatting it 
' Looping to format all the finds : 

Sub FindFormatPortHeaders()

Dim FoundCellAddr As String
Range("E4").Select


' foundCelladdress contains the cell addres of the currently found cell


    Cells.Find(What:="portfolio", After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Activate
        
    FoundCellAddr = ActiveCell.Address
        
Do
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Bold = True
    End With
        
    Cells.FindNext(After:=ActiveCell).Activate
    
Loop While FoundCellAddr <> ActiveCell.Address


End Sub




' Simple Message Box : 

MsgBox "Hello Bhushan"

MsgBox "Hello User", vbYesNoCancel


' Msgbox linked with the User Input and then using the input to generate another message

Public Sub TestMsgInpBox()

inp = MsgBox("Would You Like sunshine energy?", vbYesNo)

If inp = vbYes Then
    MsgBox ("Go get sunshine")
Else: MsgBox ("Okay, but work hard")
End If

End Sub


' For breaking code : Code Continuation character 
' Inserting text (while display) into a new line : vbcrlf constant 

Dim intResponse As Integer

intResponse = MsgBox("Came to Calcutta in the late 1960s?", _
vbYesNo, "It is Calutta Day today")

If intResponse = vbYes Then
MsgBox ("Sorry!" & vbCrLf & "You are under arrest")
Else: MsgBox ("Good!" & vbCrLf & "You are Exonerated")
End If




' Sorting Based on Input from the User 



Option Explicit

Sub DateThenTime()
'
' DateThenTime Macro
' Sorts table by date and then time.
'

'
    Range("A5:G78").Select
    Selection.Sort Key1:=Range("A5"), Order1:=xlAscending, Key2:=Range("B5") _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal, DataOption2 _
        :=xlSortNormal
End Sub
Sub RepSort()
'
' RepSort Macro
' Sorts by Rep, Date, and then Time
'

'
    
    Range("A5:G78").Select
    Selection.Sort Key1:=Range("C5"), Order1:=xlAscending, Key2:=Range("A5") _
        , Order2:=xlAscending, Key3:=Range("B5"), Order3:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
        xlSortNormal
End Sub
Sub ClientDateTime()
'
' ClientDateTime Macro
' Sorts by Client, Date, Time
'

'
    
    Range("A5:G78").Select
    Selection.Sort Key1:=Range("D5"), Order1:=xlAscending, Key2:=Range("A5") _
        , Order2:=xlAscending, Key3:=Range("B5"), Order3:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
        xlSortNormal
End Sub
Sub ProductDateTime()
'
' ProductDateTime Macro
' Sorts by product, date, and then time
'

'
    
    Range("A5:G78").Select
    Selection.Copy
    Application.CutCopyMode = False
    Selection.Sort Key1:=Range("E5"), Order1:=xlAscending, Key2:=Range("A5") _
        , Order2:=xlAscending, Key3:=Range("B5"), Order3:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
        xlSortNormal
End Sub
Sub ProblemProduct()
'
' ProblemProduct Macro
' Sorts by problem and then product.
'

'
    
    Range("A5:G78").Select
    Selection.Sort Key1:=Range("F5"), Order1:=xlAscending, Key2:=Range("E5") _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal, DataOption2 _
        :=xlSortNormal
End Sub
Sub SortBy()
'
'
' This is a recursive Macro VBA code :
' Select Case End Select

Dim Message, TitleBartxt, DefaultTxt, SortVal As String
Dim YNAnswer As Integer

Message = "Enter a Number by the following fields" & vbCrLf & _
"1 - By Date and Time : " & vbCrLf & _
"2 - By Customer Service Rep Date and Time :"

TitleBartxt = "Sort Call Center Log"
DefaultTxt = "Enter 1 or 2"

SortVal = InputBox(Message, TitleBartxt, DefaultTxt)

Select Case SortVal
    Case "1"
        Call DateThenTime
    Case "2"
        Call RepSort
    Case Else
        YNAnswer = MsgBox("You did not type 1 or 2, Try Again?", vbYesNo)
        If YNAnswer = vbYes Then
            Call SortBy
        End If
        
End Select


End Sub




' Given a Month and an Year : List all the dates in that month 
' Formula could be added to a particular cell in Excel


Public Sub DatesinThisMonth()

Dim x, MonthVal, YearVal As Integer

Range("A5").Select
ActiveCell.FormulaR1C1 = "=DAY(EOMONTH(DATE(RC[2],RC[1],1),0))"
Range("A5").Select
Selection.NumberFormat = "General"
NumMonths = CInt(Range("A5").Value)
Selection.Clear

' Dateserial converts a Year month and Day value to date data type 

MonthVal = Range("B5").Value
YearVal = Range("C5").Value

For x = 1 To NumMonths
    Range("D" & 4 + x).Value = DateSerial(YearVal, MonthVal, x)

Next x

End Sub


Public Sub FormatasLong()

Dim x As Integer
Dim DateVal As Date

For x = 1 To NumMonths
    DateVal = Range("D" & 4 + x).Value
    Range("D" & 4 + x) = Format(DateVal, "Short Date")

Next x

End Sub






' copying template sheet into 12 other sheets 




Sub RenameSheets()
'
' Extractign the Month Part using Format and mmmm 

Dim x As Integer

For x = 1 To 12
        
    Worksheets(1).Copy After:=Worksheets(x)
    Worksheets(x + 1).Name = Format(DateSerial(2345, x, 1), "mmmm")
    
Next x


End Sub



' Moving Worksheets 

Sub SEMove()
'
' SEMove Macro
' Moves Southeast worksheets to beginning of worksheet list.
'

Worksheets("SE Sales").Move Before:=Worksheets(1)
Worksheets("SE Marketing").Move Before:=Worksheets(1)
Worksheets("SE Clients").Move Before:=Worksheets(1)
Worksheets("SE Team").Move Before:=Worksheets(1)

End Sub


' Printing Worksheets : 
' Print Out all the Worksheets : 

Worksheets.Printout 
Worksheets.PrintPreview

' One can also choose a specific worksheet instead of all worksheets 







Sub MoveCopyPrintDivisionQuarter()

Call MovebyInput
Call CreateQuarterlyLog
Call DuplicateMonthlyLog
Call PrintTeamQuarter




' Macro VBA Script to Print RegionWise and QuarterWise 


End Sub

Sub MovebyInput()
'
Dim Message As String
Dim Region, YNAnswer As Integer

Message = "Enter the region of Your Choice" & vbCrLf & _
    "1 - SouthEast" & vbCrLf & _
    "2 - NorthEast" & vbCrLf & _
    "3 - MidWest" & vbCrLf & _
    "4 - SouthWest" & vbCrLf & _
    "5 - NorthWest" & vbCrLf & _
    "6 - FarWest"
    
Region = InputBox(Message, "Region Selection", "Enter 1,2,3,4,5,6")

Select Case Region
    Case 1
        Call SEMove
    Case 2
        Call NEMove
    Case 3
        Call MWMove
    Case 4
        Call SWMove
    Case 5
        Call NWMove
    Case 6
        Call SWMove
    Case Else
        YNAnswer = MsgBox("Did not type Number between 1-6" & vbCrLf & _
        "Try Again??", vbYesNo)
        If YNAnswer = vbYes Then
            MovebyInput
        End If
        
        

End Select


  
End Sub
Sub CreateQuarterlyLog()
'
'
'
Range("A20000").End(xlUp).Select

Selection.Offset(3, 0).Select

Selection.Value = "LOG"

With Selection.Font
    .Size = 16
    .Bold = True
End With
    
Selection.Offset(1, 0).Select
Selection.Value = "Client Name"
Selection.Font.Bold = True

Selection.Offset(0, 1).Select
Selection.Value = "Contact Name"
Selection.Font.Bold = True

Selection.Offset(0, 1).Select
Selection.Value = "Date"
Selection.Font.Bold = True

Selection.Offset(0, 1).Select
Selection.Value = "duration"
Selection.Font.Bold = True

Selection.Offset(0, 1).Select
Selection.Value = "Notes"
Selection.Font.Bold = True


End Sub

Sub DuplicateMonthlyLog()

Dim QuarterSelect, y As Integer

QuarterSelect = InputBox("Which Quarter is this for" & vbCrLf & _
"Please Select amongst 1,2,3,4, we are not responsible otherwise")

' Format formula in VBA: In order to format a particular value 

For y = 1 To 3
    Worksheets(1).Copy After:=Worksheets(y)
    Worksheets(y + 1).Name = Format(DateSerial(1, QuarterSelect * 3 - 3 + y, 1) _
    , "MMMM")
    
Next y


End Sub



Sub PrintTeamQuarter()

Worksheets(2).PrintPreview
Worksheets(3).PrintPreview
Worksheets(4).PrintPreview


End Sub



' User Defined Functions : Return variable and function name should be the same 


Public Function CostForGas(Miles As Double, MPG As Double, Gallon_cost As Double)

CostForGas = Gallon_cost * Miles / MPG

End Function






Public Function PercentChangeOvertime(Current As Double, Previous As Double)

PercentChangeOvertime = (Current - Previous) / (Previous)

End Function




Public Function SurfaceArea(HeightHouseSquareBlock As Double, HeightRoofTriangleBlock As Double, Width As Double, Depth As Double)

Sides = HeightHouseSquareBlock * Depth * 2

FrontBack = HeightHouseSquareBlock * Width * 2

Dim roof_slant_height As Double

roof_slant_height = Sqr(HeightRoofTriangleBlock * HeightRoofTriangleBlock + (Width / 2) * (Width / 2))

Roof = Depth * roof_slant_height * 2

AreaBetween = 0.5 * 2 * HeightRoofTriangleBlock * Width

SurfaceArea = Sides + FrontBack + Roof + AreaBetween


End Function




